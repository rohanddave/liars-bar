package view;

import model.game.Player;
import model.game.Claim;
import model.game.Rank;
import java.util.List;

public class ActionView {
    private static final String BORDER = "‚ïê".repeat(60);
    
    public void displayAvailableActions(List<String> actions, Player currentPlayer) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText(currentPlayer.getId() + "'s Turn", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë%s‚ïë%n", centerText("Choose your action:", 60));
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
        
        for (int i = 0; i < actions.size(); i++) {
            System.out.printf("%d. %s%n", i + 1, actions.get(i));
        }
        
        System.out.println();
        System.out.print("Enter your choice (1-" + actions.size() + "): ");
    }
    
    public void displayClaimAction(Player player, int count, Rank rank) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("MAKING CLAIM", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë Player: %-49s ‚ïë%n", player.getId());
        System.out.printf("‚ïë Claims: %d %s%-42s ‚ïë%n", count, rank.toString(), "");
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
    }
    
    public void displayChallengeAction(Player challenger, Claim challengedClaim) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("CHALLENGE ISSUED", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë Challenger: %-45s ‚ïë%n", challenger.getId());
        System.out.printf("‚ïë Challenged: %-45s ‚ïë%n", challengedClaim.getPlayer().getId());
        System.out.printf("‚ïë Claim: %d cards%-42s ‚ïë%n", challengedClaim.getCount(), "");
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
    }
    
    public void displayRevolverAction(Player player) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("REVOLVER TIME", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë %s must spin the revolver%-28s ‚ïë%n", player.getId(), "");
        System.out.printf("‚ïë%s‚ïë%n", centerText("üî´ Russian Roulette üî´", 60));
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
        System.out.println("Press Enter to spin the revolver...");
    }
    
    public void displayClaimPrompt(Rank currentRank, int maxCards) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("MAKE YOUR CLAIM", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë Current round: %s%-40s ‚ïë%n", currentRank.toString(), "");
        System.out.printf("‚ïë You must claim cards of this type%-23s ‚ïë%n", "");
        System.out.printf("‚ïë (Aces count as wildcards)%-31s ‚ïë%n", "");
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
        
        System.out.printf("How many %s do you claim? (1-%d): ", currentRank.toString(), maxCards);
    }
    
    public void displayChallengePrompt(Claim currentClaim, Rank currentRank) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("CHALLENGE DECISION", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë %s claims %d %s%-30s ‚ïë%n", 
            currentClaim.getPlayer().getId(), 
            currentClaim.getCount(), 
            currentRank.toString(), "");
        System.out.printf("‚ïë%s‚ïë%n", centerText("Do you believe this claim?", 60));
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
        
        System.out.println("1. Accept the claim (continue game)");
        System.out.println("2. Challenge the claim (reveal cards)");
        System.out.println();
        System.out.print("Enter your choice (1-2): ");
    }
    
    public void displayCardSelectionPrompt(int claimCount) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("SELECT CARDS", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë Select %d cards from your hand%-28s ‚ïë%n", claimCount, "");
        System.out.printf("‚ïë Enter card numbers separated by spaces%-18s ‚ïë%n", "");
        System.out.printf("‚ïë Example: 1 3 5%-44s ‚ïë%n", "");
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
        System.out.print("Enter card numbers: ");
    }
    
    public void displayActionResult(String action, boolean success, String message) {
        String status = success ? "SUCCESS" : "FAILED";
        String icon = success ? "‚úÖ" : "‚ùå";
        
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("ACTION " + status, 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë Action: %-49s ‚ïë%n", action);
        System.out.printf("‚ïë %s %-54s ‚ïë%n", icon, message);
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
    }
    
    public void displayTurnTransition(Player fromPlayer, Player toPlayer) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("TURN CHANGE", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        
        if (fromPlayer != null) {
            System.out.printf("‚ïë Previous: %-45s ‚ïë%n", fromPlayer.getId());
        }
        
        System.out.printf("‚ïë Current:  %-45s ‚ïë%n", toPlayer.getId());
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
        
        System.out.printf("It's now %s's turn!%n", toPlayer.getId());
        System.out.println("Press Enter to continue...");
    }
    
    public void displayWaitingForPlayer(Player player, String action) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("WAITING", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë Waiting for %s to %s%-25s ‚ïë%n", 
            player.getId(), action, "");
        System.out.printf("‚ïë%s‚ïë%n", centerText("‚è≥ Please wait...", 60));
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
    }
    
    public void displayActionHistory(List<String> recentActions) {
        if (recentActions == null || recentActions.isEmpty()) {
            return;
        }
        
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("RECENT ACTIONS", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        
        int displayCount = Math.min(5, recentActions.size());
        for (int i = recentActions.size() - displayCount; i < recentActions.size(); i++) {
            System.out.printf("‚ïë ‚Ä¢ %-55s ‚ïë%n", recentActions.get(i));
        }
        
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
    }
    
    public void displayInvalidAction(String reason) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("INVALID ACTION", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë ‚ùå %-55s ‚ïë%n", reason);
        System.out.printf("‚ïë%s‚ïë%n", centerText("Please try again", 60));
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
    }
    
    public void displayActionConfirmation(String action, String details) {
        System.out.println("‚ïî" + BORDER + "‚ïó");
        System.out.printf("‚ïë%s‚ïë%n", centerText("CONFIRM ACTION", 60));
        System.out.println("‚ï†" + BORDER + "‚ï£");
        System.out.printf("‚ïë Action: %-49s ‚ïë%n", action);
        System.out.printf("‚ïë Details: %-48s ‚ïë%n", details);
        System.out.printf("‚ïë%s‚ïë%n", centerText("Are you sure?", 60));
        System.out.println("‚ïö" + BORDER + "‚ïù");
        System.out.println();
        System.out.print("Confirm (y/n): ");
    }
    
    private String centerText(String text, int width) {
        if (text.length() >= width) {
            return text.substring(0, width);
        }
        
        int padding = (width - text.length()) / 2;
        StringBuilder sb = new StringBuilder();
        
        for (int i = 0; i < padding; i++) {
            sb.append(" ");
        }
        sb.append(text);
        
        while (sb.length() < width) {
            sb.append(" ");
        }
        
        return sb.toString();
    }
}